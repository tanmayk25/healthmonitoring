/*
 *  Sends all the sensor readings to the provided URL
 *
 *  
 *
 */
#include "DHT.h"
#include <WiFi.h>
#include <HTTPClient.h>
#include <Arduino.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include "FS.h"
#include "SPIFFS.h"
#include <OneWire.h>
#include <DallasTemperature.h>
#include <math.h>
#include "MAX30105.h"
#include "spo2_algorithm.h"
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>

#define DHTTYPE DHT11
#define DHTPIN 4
#define ONE_WIRE_BUS 13
#define TOUCH_N_HOLD_LIMIT 4
#define BPM_SENSOR_MAX_WAIT 30
#define MAX_BRIGHTNESS 255
#define HEART_PIN 36
#define ECG_BUFFER_LENGTH 2048
#define ECG_ZERO_READING_LIMIT 200

// Sensors
DHT dht(DHTPIN, DHTTYPE);
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);
MAX30105 particleSensor;
Adafruit_MPU6050 mpu;

const char* ssid     = "naveen";
const char* password = "jangy123";


AsyncWebServer server(80);

// Unique Device ID
String deviceId = "0ee572eb-1175";

// Variables for sensor readings
float bodyTemp;
float humidity;
float envTemp;
int heartValue;
String ecgDefaultReading = "0000";
String ecgReading;
char str[5]; // Temporary buffer for individual ecg value
char zero = '0';
char ecgBuffer[ECG_BUFFER_LENGTH]; // Buffer for all ecg values
int bpmSum = 0;
int spo2Sum = 0;;
int32_t spo2;
int8_t validSPO2; //indicator to show if the SPO2 calculation is valid
int32_t heartRate; //indicator to show if the heart rate calculation is valid
int8_t validHeartRate;
uint32_t irBuffer[100]; //infrared LED sensor data
uint32_t redBuffer[100];  //red LED sensor data
int32_t bufferLength; //data length
byte pulseLED = 11;
// Variables for accelerometer/Gyroscope Fall detection
boolean fall = false;
int amplitude = 0;
int angleChange = 0;
int accCount = 0;
// Touch sensor indication variables
boolean sendReadings = false;
int touchSensorValue = 1000;
int touchCount = 0;

// Notification LED
byte notifLED = 2;
const char* FALL_DETAILS_URL = "http://khandelwaltanmay.com/ping-of-things/fall_details/";
const char* SENSOR_DATA_URL = "http://khandelwaltanmay.com/ping-of-things/sensor_data/";

void setup()
{
    Serial.begin(115200);
    pinMode(notifLED, OUTPUT);
    pinMode(pulseLED, OUTPUT);
    Serial.print("Connecting to ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi connected");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());

    // Initialize MAX30102 sensor - Start
    if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed
    {
      Serial.println(F("MAX30102 was not found. Please check wiring/power."));
      while (1);
    }
    
    server.on("/test", HTTP_GET, [](AsyncWebServerRequest *request){
      request->send(200, "text/html", "<!DOCTYPE html><html lang=\"en\"><head><meta charset=\"UTF-8\"><title>Health Monitor</title></head><body><main><h2>Your Device is connected test</h2></main></body>");
    });
  
    server.begin();
    dht.begin();
    sensors.begin();
    //httpClient.setReuse(false);
    if (!mpu.begin()) {
    Serial.println("Failed to find MPU6050 chip");
    while (1) {
      delay(10);
      }
    }
    mpu.setAccelerometerRange(MPU6050_RANGE_16_G);
    mpu.setGyroRange(MPU6050_RANGE_250_DEG);
    mpu.setFilterBandwidth(MPU6050_BAND_21_HZ);
    delay(1000);
    Serial.println("Setup done");
}

void loop()
{
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);
  amplitude = round(pow(pow(a.acceleration.x,2)+pow(a.acceleration.y,2)+pow(a.acceleration.z,2),0.5));
  angleChange = round(pow(pow(g.gyro.x,2)+pow(g.gyro.y,2)+pow(g.gyro.z,2),0.5));
  
  if(accCount == 0 && amplitude >= 15 && angleChange >= 3) {
    Serial.print("Amplitude: ");
    Serial.println(amplitude);
    Serial.print("Angle change: ");
    Serial.println(angleChange);
    accCount = 1;
  }
  else if(accCount == 1 && amplitude >= 30 && angleChange >= 4) {
    Serial.print("Amplitude: ");
    Serial.println(amplitude);
    Serial.print("Angle change: ");
    Serial.println(angleChange);
    accCount = 2;
  }
  else {
    accCount = 0;
  }
  
  if(accCount == 2) {
    Serial.println("Fall detected");
    accCount = 0;
    HTTPClient httpClient;
    httpClient.begin(FALL_DETAILS_URL);
    httpClient.addHeader("Content-Type", "application/json");
    int code  = httpClient.POST("{\"device_id\": \"" + deviceId + "\"}");
    Serial.print("Response code: ");
    Serial.println(code);
    httpClient.end();
    delay(1000);
  }
  touchSensorValue = touchRead(T3);
  while(touchSensorValue < 30 && touchCount < TOUCH_N_HOLD_LIMIT) {
    touchCount = touchCount + 1;
    delay(1000);
    touchSensorValue = touchRead(T3);
  }
  if(touchCount >= TOUCH_N_HOLD_LIMIT) {
    sendReadings = true;
  }
  touchCount = 0;
  
  if(sendReadings) {
    // Notification LED high to indicate request was accepted
    digitalWrite(notifLED, HIGH);
    Serial.println("Touch event detected. Sending readings.");
    readEnvTempAndHumidity();   // Read environment temperature and humidity
    readBodyTemperature();    // Read body temperature

    
    
      // ECG readings start
    int k = 0;
    int ecgZeroCount = 0;
    while(k - 4 < ECG_BUFFER_LENGTH) {
      if(ecgZeroCount > ECG_ZERO_READING_LIMIT) {
        break;
      }
      else {
        ecgZeroCount = 0;
      }
      heartValue = analogRead(HEART_PIN);
      Serial.println(heartValue);
      if(heartValue == 0) {
        ecgBuffer[k++] = '0';
        ecgBuffer[k++] = ',';
        ecgZeroCount++;
        continue;
      }
      int j = 0;
      while(heartValue != 0) {
        byte rem = heartValue % 10;
        str[j++] = (char)(rem + zero);
        heartValue = heartValue/10;
      }
      j--;
      for(; j >= 0; j--) {
        
        if(k == ECG_BUFFER_LENGTH) {
          break;
        }
        ecgBuffer[k++] = str[j]; 
      }
      if(k < ECG_BUFFER_LENGTH) {
        ecgBuffer[k++] = ',';  
      }
      delay(5);
    }
    if(ecgZeroCount < ECG_ZERO_READING_LIMIT) {
      ecgReading = ecgBuffer;
    }
    else {
      Serial.println("Zero count limit of ECG readings reached. Skipping ECG.");
      ecgReading = ecgDefaultReading;
    }
    // ECG readings end
    
    // Building request JSON
    String json = "{\"device_id\": \"" + deviceId + "\", \"body_temperature\": " + round(bodyTemp) + ", \"humidity\": " + round(humidity) + ", \"heart_rate\": " + (bpmSum/3) 
    + ", \"environment_temperature\": " + round(envTemp) + ", \"blood_oxygen\": " + (spo2Sum/3) + ", \"reading\": \"" + ecgReading + "\"}";
    Serial.println(json);
    // Sending the request to the server
    HTTPClient httpClient;
    httpClient.begin(SENSOR_DATA_URL);
    httpClient.addHeader("Content-Type", "application/json");
    int code  = httpClient.POST(json);
    Serial.print("Response code: ");
    Serial.println(code);
    String response = httpClient.getString();
    Serial.print("Response content: ");
    Serial.println(response);
    httpClient.end();
    delay(200);
    Serial.println("Readings sent. Reverting back to default values.");
    envTemp = humidity = bodyTemp = spo2 = heartRate = bpmSum = spo2Sum = 0;
    sendReadings = false;
  }
  delay(50);
}

void readEnvTempAndHumidity() {
  Serial.println("Reading environment temperature and humidity");
  humidity = dht.readHumidity();
  envTemp = dht.readTemperature(true);
  for(int i = 0; i < 10; i++) {
    
    if(!isnan(envTemp) && !isnan(humidity)) {
      break;
    }
    if(isnan(humidity) || humidity == 0) {
      humidity = dht.readHumidity();  
    }
    if(isnan(envTemp) || envTemp == 0) {
      envTemp = dht.readTemperature(true);  
    }
    delay(500);
  }
  if(isnan(envTemp)) {
    envTemp = 0;
  }
  if(isnan(humidity)) {
    humidity = 0;
  }
}
void readBodyTemperature() {
  sensors.requestTemperatures(); 
  bodyTemp = sensors.getTempFByIndex(0);
}

void calculateSpo2AndBPM() {
  
  bufferLength = 100; //buffer length of 100 stores 4 seconds of samples running at 25sps
  
  //read the first 100 samples, and determine the signal range
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) {
      particleSensor.check(); //Check the sensor for new data
    } 
    redBuffer[i] = particleSensor.getRed();
    irBuffer[i] = particleSensor.getIR();
    particleSensor.nextSample(); //We're finished with this sample so move to next sample
    //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

    //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
      
    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
    for (byte i = 25; i < 100; i++)
    {
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }
    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
    {
      while (particleSensor.available() == false){ //do we have new data?
        particleSensor.check(); //Check the sensor for new data
      }
      redBuffer[i] = particleSensor.getRed();
      irBuffer[i] = particleSensor.getIR();
 
      particleSensor.nextSample(); //We're finished with this sample so move to next sample
    } 
    if (validSPO2 == 1 && validHeartRate == 1 && spo2 > 30) {
      Serial.println("valid spo2 and HR found");
      Serial.println(spo2);
      spo2Sum += spo2;
      bpmSum += heartRate;
      return;
    }    
    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);
  }
  
}